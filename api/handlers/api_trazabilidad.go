/*
 * API for INVINOS blockchain broker
 *
 * Esta es la API para el brocker de INVINOS con el que hay que interactuar para realizar transacciones en la blockchain.
 *
 * API version: 1.0
 * Contact: francisco.delicado@uclm.es
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package handlers

import (
	"github.com/gorilla/mux"
	"github.com/swarleynunez/INVINOS/core"
	"github.com/swarleynunez/INVINOS/core/types"
	"github.com/swarleynunez/INVINOS/core/utils"
	"net/http"
	"slices"
)

func TraceabilityGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	// Get GET parameters
	lotn := mux.Vars(r)["lotn"]
	if lotn == "" {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// Get current (last) product ID
	cProdID := core.GetProductFromLotNumber(lotn)
	if cProdID == 0 {
		w.WriteHeader(http.StatusNotFound)
		utils.CheckError(ErrLotNumberNotFound, utils.WarningMode)
		return
	}

	var totalTrans []types.TransitionInfo
	prod := core.GetProduct(cProdID)

	// For each product in the traceability vector
	for cProdID > 0 {
		// Get product's transitions
		var totalLosses uint64
		var tmpTrans []types.TransitionInfo
		for _, t := range prod.Tv.Transitions {
			totalLosses += t.LostQuantity.Uint64()

			// Custom transition object
			newTran := types.TransitionInfo{
				Transition:       t,
				CurrentProductID: cProdID,
				Quantity:         prod.Quantity.Uint64() - totalLosses,
			}
			tmpTrans = append(tmpTrans, newTran)
		}

		// Sort and save product's transitions
		slices.Reverse(tmpTrans)
		totalTrans = append(totalTrans, tmpTrans...)

		// Get previous product in the traceability vector
		cProdID = prod.Tv.PrevProductID.Uint64()
		prod = core.GetProduct(cProdID)
	}

	// Debug
	/*fmt.Println("----- Traceability of \"" + lotn + "\" -----")
	slices.Reverse(totalTrans)
	for _, t := range totalTrans {
		var info string
		if len(t.Transition.Info) > 50 {
			info = t.Transition.Info[:50] + "..."
		} else {
			info = t.Transition.Info
		}
		fmt.Println(
			"PRODUCT -->", t.CurrentProductID, "|",
			core.GetTransitionTypeName(t.Transition.TypeID.Uint64()), "|",
			t.Quantity, "|",
			t.Transition.LostQuantity, "|",
			t.Transition.ProductTypeID, "|",
			t.Transition.CompanyID, "|",
			t.Transition.ContainerID, "|",
			"INFO -->", info,
		)
	}*/

	// Successful request
	w.WriteHeader(http.StatusOK)
	_, err := w.Write([]byte(utils.MarshalJSON(totalTrans)))
	utils.CheckError(err, utils.WarningMode)
}
