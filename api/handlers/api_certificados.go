/*
 * API for INVINOS blockchain broker
 *
 * Esta es la API para el brocker de INVINOS con el que hay que interactuar para realizar transacciones en la blockchain.
 *
 * API version: 1.0
 * Contact: francisco.delicado@uclm.es
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package handlers

import (
	"context"
	"github.com/swarleynunez/INVINOS/core"
	"github.com/swarleynunez/INVINOS/core/utils"
	"io"
	"net/http"
	"os"
	"strconv"
)

func UploadCertificatePost(w http.ResponseWriter, r *http.Request) {

	// Get file from request
	fcontent, fheader, err := r.FormFile("file")
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		utils.CheckError(err, utils.WarningMode)
		return
	}

	// Create file in fs
	path := utils.FormatPath(utils.GetEnv("TMP_DIR"), fheader.Filename)
	file, err := os.Create(path)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		utils.CheckError(err, utils.WarningMode)
		return
	}

	// Write file to fs
	_, err = io.Copy(file, fcontent)
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		utils.CheckError(err, utils.WarningMode)
		return
	}

	// Successful request
	w.WriteHeader(http.StatusOK)
}

func DownloadCertificateGet(w http.ResponseWriter, r *http.Request) {

	// Get URL parameters
	strCid := r.URL.Query().Get("cid")
	filename := r.URL.Query().Get("filename")
	if strCid == "" || filename == "" {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	// Get file from IPFS
	filepath := utils.FormatPath(utils.GetEnv("TMP_DIR"), strCid+"_"+filename)
	err := core.DownloadIPFSFile(context.Background(), strCid, filepath)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		utils.CheckError(err, utils.WarningMode)
		return
	}

	// Set response headers
	w.Header().Set("Content-Disposition", "attachment; filename="+strconv.Quote(filename))
	w.Header().Set("Content-Type", r.Header.Get("Content-Type"))

	// Send file to the client
	http.ServeFile(w, r, filepath)

	// Delete tmp file from fs
	_ = os.Remove(filepath)

	// Successful request
	w.WriteHeader(http.StatusOK)
}
