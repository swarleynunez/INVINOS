/*
 * API for INVINOS blockchain broker
 *
 * Esta es la API para el brocker de INVINOS con el que hay que interactuar para realizar transacciones en la blockchain.
 *
 * API version: 1.0
 * Contact: francisco.delicado@uclm.es
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"fmt"
	"github.com/gorilla/mux"
	"github.com/swarleynunez/INVINOS/api/handlers"
	"net/http"
	"strings"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	_, _ = fmt.Fprintf(w, "INVINOS API v1")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/v1/",
		Index,
	},

	Route{
		"AddProductPost",
		strings.ToUpper("Post"),
		"/v1/add/product",
		handlers.AddProductPost,
	},

	Route{
		"AddCompanyPost",
		strings.ToUpper("Post"),
		"/v1/add/company",
		handlers.AddCompanyPost,
	},

	Route{
		"AddContainerPost",
		strings.ToUpper("Post"),
		"/v1/add/container",
		handlers.AddContainerPost,
	},

	Route{
		"ProductEntryPost",
		strings.ToUpper("Post"),
		"/v1/product/entry",
		handlers.ProductEntryPost,
	},

	Route{
		"ProductProcessingPost",
		strings.ToUpper("Post"),
		"/v1/product/processing",
		handlers.ProductProcessingPost,
	},

	Route{
		"ProductPartitionPost",
		strings.ToUpper("Post"),
		"/v1/product/partition",
		handlers.ProductPartitionPost,
	},

	Route{
		"ProductOutputPost",
		strings.ToUpper("Post"),
		"/v1/product/output",
		handlers.ProductOutputPost,
	},

	Route{
		"TraceabilityGet",
		strings.ToUpper("Get"),
		"/v1/traceability/{lotn}",
		handlers.TraceabilityGet,
	},
}
