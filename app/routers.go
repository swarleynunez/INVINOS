/*
 * API for INVINOS blockchain broker
 *
 * Esta es la API para el brocker de INVINOS con el que hay que interactuar para realizar transacciones en la blockchain.
 *
 * API version: 1.0
 * Contact: francisco.delicado@uclm.es
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package app

import (
	"github.com/gorilla/mux"
	"github.com/swarleynunez/INVINOS/app/handlers"
	"net/http"
	"strings"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	Public      bool
}

type Routes []Route

func NewRouter() *mux.Router {
	r := mux.NewRouter().StrictSlash(true)
	r.PathPrefix("/static/").Handler(http.StripPrefix("/static/", http.FileServer(http.Dir("app/static"))))

	for _, route := range routes {
		handler := middleware(route.HandlerFunc, route.Public)
		r.Methods(route.Method).Path(route.Pattern).Name(route.Name).Handler(handler)
	}

	return r
}

var routes = Routes{
	Route{
		"IndexGet",
		strings.ToUpper("Get"),
		"/",
		handlers.Index,
		true,
	},

	Route{
		"CreateInstancePut",
		strings.ToUpper("Put"),
		"/api/v1/create_instance",
		handlers.CreateInstancePut,
		true,
	},

	Route{
		"AddProductTypePost",
		strings.ToUpper("Post"),
		"/api/v1/add/product_type",
		handlers.AddProductTypePost,
		false,
	},

	Route{
		"AddCompanyPost",
		strings.ToUpper("Post"),
		"/api/v1/add/company",
		handlers.AddCompanyPost,
		false,
	},

	Route{
		"AddContainerPost",
		strings.ToUpper("Post"),
		"/api/v1/add/container",
		handlers.AddContainerPost,
		false,
	},

	Route{
		"ProductEntryPost",
		strings.ToUpper("Post"),
		"/api/v1/product/entry",
		handlers.ProductEntryPost,
		false,
	},

	Route{
		"ProductProcessingPost",
		strings.ToUpper("Post"),
		"/api/v1/product/processing",
		handlers.ProductProcessingPost,
		false,
	},

	Route{
		"ProductPartitionPost",
		strings.ToUpper("Post"),
		"/api/v1/product/partition",
		handlers.ProductPartitionPost,
		false,
	},

	Route{
		"ProductOutputPost",
		strings.ToUpper("Post"),
		"/api/v1/product/output",
		handlers.ProductOutputPost,
		false,
	},

	Route{
		"TraceabilityGet",
		strings.ToUpper("Get"),
		"/api/v1/traceability/{lot_num}",
		handlers.TraceabilityGet,
		false,
	},

	Route{
		"UploadCertificatePost",
		strings.ToUpper("Post"),
		"/api/v1/certificate/upload",
		handlers.UploadCertificatePost,
		false,
	},

	Route{
		"DownloadCertificateGet",
		strings.ToUpper("Get"),
		"/api/v1/certificate/download",
		handlers.DownloadCertificateGet,
		true,
	},
}
